name: main

on:
  push:
    branches: [ main ]

jobs:
  build:
    name: Build CI (Push)
    runs-on: ubuntu-latest
    if: ${{ !startsWith(github.event.head_commit.message, '[skip ci]') }} && ${{ github.event_name != 'pull_request' && success() && github.ref == 'refs/heads/main' }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          fetch-depth: 0
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.12
        with:
          cmake-version: '3.22.1'
      - name: set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: gradle
      - name: Install NDK v23
        run: |
          echo "y" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install "ndk;23.1.7779620" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo "sdk.dir=${ANDROID_HOME}" > local.properties
          ln -s  ${ANDROID_HOME}/cmake/3.18.1/bin/ninja /opt/hostedtoolcache/cmake/3.22.1/x64/cmake-3.22.1-linux-x86_64/bin/
      - name: Install ccache
        run: |
          sudo apt install -y ccache
          ccache -zp
          ccache -o max_size=10G
          ccache -o hash_dir=false
          ccache -o compiler_check='%compiler% -dumpmachine; %compiler% -dumpversion'
      - name: Native Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/ccache
            ~/.ccache
          key: ccache
      - name: Cache Gradle Dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            !~/.gradle/caches/build-cache-*
          key: gradle-deps-core-${{ hashFiles('**/build.gradle') }}
          restore-keys: |
            gradle-deps
      - name: Cache Gradle Build
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches/build-cache-*
          key: gradle-builds-core-${{ github.sha }}
          restore-keys: |
            gradle-builds
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: |
          echo ${{ secrets.SIGN_KEYSTORE_BASE64 }} | base64 -d > keystore.jks
          ./gradlew :app:assembleRelease
          ccache -s
        env:
          KEYSTORE_PATH: "../keystore.jks"
          KEYSTORE_PASSWORD: ${{ secrets.SIGN_KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.SIGN_ALIAS }}
          KEY_PASSWORD: ${{ secrets.SIGN_KEY_PASSWORD }}

      - name: Show Artifacts MD5
        run: md5sum app/build/outputs/apk/release/*.apk

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        # don't upload the artifacts if it's a pull request
        if: ${{ !github.event.pull_request }}
        with:
          path: 'app/build/outputs/apk/release/*.apk'
          name: QAuxiliary-release-${{ github.event.head_commit.id }}

  upload-telegram:
    name: Upload to Telegram
    if: ${{ github.event_name != 'pull_request' && success() && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Donwload Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Release
        env:
          CHANNEL_ID: ${{ secrets.TO_TELEGRAM }}
          BOT_TOKEN: ${{ secrets.TELEGRAM_TOKEN  }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          COMMIT_URL: ${{ github.event.head_commit.url }}
        run: |
          export release=$(find . -name "*.apk")
          ESCAPED=`python3 -c 'import json,os,urllib.parse; msg = json.dumps(os.environ["COMMIT_MESSAGE"]); print(urllib.parse.quote(msg if len(msg) <= 1024 else json.dumps(os.environ["COMMIT_URL"])))'`
          curl -v "https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup?chat_id=${CHANNEL_ID}&media=%5B%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2Frelease%22%2C%22caption%22%3A${ESCAPED}%7D%5D" -F release="@$release"

  upload-taichi:
    name: Upload taichi
    if: ${{ github.event_name != 'pull_request' && success() && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Donwload Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Release
        run: |
          curl "https://gist.githubusercontent.com/qwq233/2a903f28a38d48d57731a1e4d6358948/raw/80e515d659a6f3c4737a1674f50fae5087e1f83c/taichi.py" -o taichi.py
          sudo apt install -y python3-pip
          pip3 install requests
          echo ${{ secrets.TC_UPLOAD_USER_TOKEN }} | base64 -d > taichi.json
          export release=$(find $OUTPUT -name "*.apk")
          python3 taichi.py $release
#  upload-lsp:
#    name: Upload to LSPosed repo
#    if: ${{ github.event_name != 'pull_request' && success() && github.ref == 'refs/heads/main' }}
#    runs-on: ubuntu-latest
#    needs:
#      - build
#    steps:
#      - name: Donwload Artifacts
#        uses: actions/download-artifact@v2
#        id: download
#        with:
#          path: artifacts
#      - name: Generate Changelog
#        env:
#          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
#          COMMIT_URL: ${{ github.event.head_commit.url }}
#        run: echo "$(python3 -c 'import json,os,urllib.parse; msg = json.dumps(os.environ["COMMIT_MESSAGE"]); print(urllib.parse.quote(msg if len(msg) <= 1024 else json.dumps(os.environ["COMMIT_URL"])))')" > ${{ github.workspace }}-CHANGELOG.txt
#      - name: find apk
#        run: echo "APK_FILE=$(find ${{steps.download.outputs.download-path}} -name '*.apk')" >> $GITHUB_ENV
#      - name: Get Apk Info
#        id: apk
#        uses: JantHsueh/get-apk-info-action@master
#        with:
#          apkPath: ${{ env.APK_FILE }}
#      - name: Get Date
#        id: date
#        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
#      - name: Release
#        uses: softprops/action-gh-release@v1
#        with:
#          tag_name: ${{steps.apk.outputs.versionCode}}
#          name: CI-${{ steps.date.outputs.date }}
#          body_path: ${{ github.workspace }}-CHANGELOG.txt
#          token: ${{ secrets.PAT_GH_QAUXV_GCS_CI_UPLOAD }}
#          files: ${{ env.APK_FILE }}
#          prerelease: true
#          repository: Xposed-Modules-Repo/io.github.qauxv
#        env:
#          GITHUB_REPOSITORY: Xposed-Modules-Repo/io.github.qauxv
